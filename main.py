import telebot
import random
import os
import requests




print(os.listdir('images'))

from config import TOKEN
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['coin'])
def send_coin(message):
    result = random.choice(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ üí∞"])
    bot.reply_to(message, f"ü™ô –ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–±—Ä–æ—à–µ–Ω–∞! –í—ã–ø–∞–ª–æ: {result}")



def gen_pass(pass_length):
    elements = "+-/*!&$#?=@<>123456789"
    password = ""
    for i in range(pass_length):
        password += random.choice(elements)
    return password

@bot.message_handler(commands=['pass'])
def send_password(message):
    password = gen_pass(8) 
    bot.reply_to(message, f"–í–æ—Ç —Ç–≤–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")


@bot.message_handler(commands=['start', 'hello'])
def send_welcome(message):
    bot.reply_to(message, f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç {bot.get_me().first_name}!')



@bot.message_handler(commands=['heh'])
def send_heh(message):
    count_heh = int(message.text.split()[1]) if len(message.text.split()) > 1 else 5
    bot.reply_to(message, "he" * count_heh)


@bot.message_handler(commands=['bye'])
def send_bye(message):
    bot.reply_to(message, "–ü–æ–∫–∞! –£–¥–∞—á–∏!")



@bot.message_handler(commands=['predict'])
def send_prediction(message):
    predictions = [
        "–î–∞, –Ω–æ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω...",
        "–ù–µ—Ç. –ò —Ç—ã —Å–∞–º –∑–Ω–∞–µ—à—å –ø–æ—á–µ–º—É.",
        "–°—É–¥—å–±–∞ –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–∞ –∫ —Ç–µ–±–µ ‚ú®",
        "–õ—É—á—à–µ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚è≥",
        "–ö–æ—à–∫–∞ –≤–∏–¥–∏—Ç —É—Å–ø–µ—Ö —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π üê± –º–∞—É",
        "–°–∫–æ—Ä–æ –≤—Å—ë —Å—Ç–∞–Ω–µ—Ç —è—Å–Ω–æ üîÆ",
        "–ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç '–¥–∞', –Ω–æ —Å —É—Å–ª–æ–≤–∏–µ–º...",
        "–°–æ–º–Ω–µ–Ω–∏—è ‚Äî —Ç–≤–æ–∏ –≤—Ä–∞–≥–∏ —Å–µ–≥–æ–¥–Ω—è üåÄ",
        "–û—Ç–≤–µ—Ç –Ω–µ —è—Å–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üå´Ô∏è",
        "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞! üí´"
    ]
    result = random.choice(predictions)
    bot.reply_to(message, f"üîÆ –¢–≤–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:\n\n{result}")






@bot.message_handler(commands=['mem'])
def send_mem(message):
   img_name = random.choice(['mem1.jpeg', 'mem2.jpeg', 'mem3.jpeg', 'mem4.jpg', 'mem5.jpg', 'mem6.png', 'mem7.jpg']
)
   with open(f'images/{img_name}', 'rb') as f:  
        bot.send_photo(message.chat.id, f) 




def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']

    
@bot.message_handler(commands=['duck'])
def duck(message):
    '''–ü–æ –∫–æ–º–∞–Ω–¥–µ duck –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_duck_image_url –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ç–∫–∏'''
    image_url = get_duck_image_url()
    bot.reply_to(message, image_url)


@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "üõ† –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "/start –∏–ª–∏ /hello - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É ü™ô\n"
        "/pass - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å üîë\n"
        "/heh [—á–∏—Å–ª–æ] - –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å 'he' –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ üòÜ\n"
        "/bye - –ü–æ–ø—Ä–æ—â–∞—Ç—å—Å—è üëã\n"
        "/predict - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üîÆ\n"
        "/mem - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º üñºÔ∏è\n"
        "/duck - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —É—Ç–∫—É ü¶Ü\n"
        "/fox - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ª–∏—Å—Éü¶ä\n"
        "/truth - –ø—Ä–∞–≤–¥–∞ –¥–Ω—èüß†\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üìú"
    
    )
    bot.reply_to(message, help_text)

def get_fox_image_url():
    url = 'https://randomfox.ca/floof/'
    
    res = requests.get(url)
    res.raise_for_status()
    data = res.json()
    return data['image']
    
        

@bot.message_handler(commands=['fox'])
def send_fox(message):
    image_url = get_fox_image_url()
    bot.send_photo(message.chat.id, image_url)


@bot.message_handler(commands=['truth'])
def send_truth(message):
    truths = [
        "üò¥ –£—Ç—Ä–æ ‚Äî —ç—Ç–æ –∑–∞–≥–æ–≤–æ—Ä –ø—Ä–æ—Ç–∏–≤ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞.",
        "üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω 100 —Ä–∞–∑ –≤ –¥–µ–Ω—å ‚Äî —ç—Ç–æ —É–∂–µ —Ö–æ–±–±–∏.",
        "üí∏ –î–µ–Ω—å–≥–∏ –Ω–µ –≥–ª–∞–≤–Ω–æ–µ, –Ω–æ –±–µ–∑ –Ω–∏—Ö –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
        "üê± –ö–æ—à–∫–∏ –Ω–µ –∂–∏–≤—É—Ç —Å –ª—é–¥—å–º–∏ ‚Äî —ç—Ç–æ –ª—é–¥–∏ –∂–∏–≤—É—Ç —É –∫–æ—à–µ–∫.",
        "‚òï –ö–æ—Ñ–µ –Ω–µ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –º–∏–ª–µ–µ, –ø–æ–∫–∞ —Ç—ã –∏—Ö —Ä–µ—à–∞–µ—à—å.",
        "üí° –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –¥–µ–ª–∞—Ç—å –≤–∏–¥, —á—Ç–æ —Ç—ã –∑–∞–Ω—è—Ç.",
        "üòÇ –°–º–µ—Ö –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∂–∏–∑–Ω—å, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Å–º–µ—ë—à—å—Å—è –Ω–∞–¥ —Å–æ–±–æ–π.",
        "üí§ ¬´–ï—â—ë 5 –º–∏–Ω—É—Ç¬ª ‚Äî —ç—Ç–æ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ª–æ–∂—å –≤ –∏—Å—Ç–æ—Ä–∏–∏.",
        "üìö –û–ø—ã—Ç ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã —É–∂–µ —Å–¥–µ–ª–∞–ª –≤—Å–µ –æ—à–∏–±–∫–∏, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –∏–¥—ë—à—å –¥–∞–ª—å—à–µ.",
        "üé≠ –ò–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ç–≤–æ—Ä—è—Ç—å—Å—è, —á—Ç–æ –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å."
    ]
    truth = random.choice(truths)
    bot.reply_to(message, f"üß† –ü—Ä–∞–≤–¥–∞ –¥–Ω—è:\n\n{truth}")
    


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, message.text)



bot.polling()
