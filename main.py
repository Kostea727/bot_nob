import telebot
import random

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot("8248674215:AAGh_FemXIATiM2C3DulJJkR6GnbfV6UzQ4")

# -----------------------
# üí´ –ö–æ–º–∞–Ω–¥–∞: /coin ‚Äî –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
# -----------------------
@bot.message_handler(commands=['coin'])
def send_coin(message):
    result = random.choice(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ üí∞"])
    bot.reply_to(message, f"ü™ô –ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–±—Ä–æ—à–µ–Ω–∞! –í—ã–ø–∞–ª–æ: {result}")


# -----------------------
# üîê –ö–æ–º–∞–Ω–¥–∞: /pass ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
# -----------------------
def gen_pass(pass_length):
    elements = "+-/*!&$#?=@<>123456789"
    password = ""
    for i in range(pass_length):
        password += random.choice(elements)
    return password

@bot.message_handler(commands=['pass'])
def send_password(message):
    password = gen_pass(8)  # –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
    bot.reply_to(message, f"–í–æ—Ç —Ç–≤–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")


# -----------------------
# üëã –ö–æ–º–∞–Ω–¥–∞: /start –∏–ª–∏ /hello ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
# -----------------------
@bot.message_handler(commands=['start', 'hello'])
def send_welcome(message):
    bot.reply_to(message, f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç {bot.get_me().first_name}!')


# -----------------------
# üòÇ –ö–æ–º–∞–Ω–¥–∞: /heh ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å "he"
# -----------------------
@bot.message_handler(commands=['heh'])
def send_heh(message):
    count_heh = int(message.text.split()[1]) if len(message.text.split()) > 1 else 5
    bot.reply_to(message, "he" * count_heh)


# -----------------------
# üëã –ö–æ–º–∞–Ω–¥–∞: /bye ‚Äî –ø—Ä–æ—â–∞–Ω–∏–µ
# -----------------------
@bot.message_handler(commands=['bye'])
def send_bye(message):
    bot.reply_to(message, "–ü–æ–∫–∞! –£–¥–∞—á–∏!")


# -----------------------
# üîÆ –ö–æ–º–∞–Ω–¥–∞: /predict ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
# -----------------------
@bot.message_handler(commands=['predict'])
def send_prediction(message):
    predictions = [
        "–î–∞, –Ω–æ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω...",
        "–ù–µ—Ç. –ò —Ç—ã —Å–∞–º –∑–Ω–∞–µ—à—å –ø–æ—á–µ–º—É.",
        "–°—É–¥—å–±–∞ –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–∞ –∫ —Ç–µ–±–µ ‚ú®",
        "–õ—É—á—à–µ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚è≥",
        "–ö–æ—à–∫–∞ –≤–∏–¥–∏—Ç —É—Å–ø–µ—Ö —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π üê±",
        "–°–∫–æ—Ä–æ –≤—Å—ë —Å—Ç–∞–Ω–µ—Ç —è—Å–Ω–æ üîÆ",
        "–ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç '–¥–∞', –Ω–æ —Å —É—Å–ª–æ–≤–∏–µ–º...",
        "–°–æ–º–Ω–µ–Ω–∏—è ‚Äî —Ç–≤–æ–∏ –≤—Ä–∞–≥–∏ —Å–µ–≥–æ–¥–Ω—è üåÄ",
        "–û—Ç–≤–µ—Ç –Ω–µ —è—Å–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üå´Ô∏è",
        "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞! üí´"
    ]
    result = random.choice(predictions)
    bot.reply_to(message, f"üîÆ –¢–≤–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:\n\n{result}")


# -----------------------
# üì© –≠—Ö–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# -----------------------
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, message.text)


# -----------------------
# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------
bot.polling()
